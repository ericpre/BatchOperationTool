# -*- coding: utf-8 -*-
"""
Created on Wed Jul 22 11:09:50 2015

@author: eric
"""
import os
from qtpy import QtWidgets
import numpy as np

import hyperspy.api as hs
try:
    from hyperspy.misc.image_tools import contrast_stretching
except ImportError:
    from hyperspy.drawing.utils import contrast_stretching


class ConvertBin:
    """
    Read bin files generated by uSTEM software
    http://tcmp.ph.unimelb.edu.au/mustem/muSTEM.html
    See documentation for more details on the format
    """

    def __init__(self, fname=None, extension_list=['tif'], overwrite=None,
                 contrast_streching=False, saturated_pixels=0.4,
                 normalise=False, save_stack=False, data_type='>f4'):
        self.fname = fname
        self.extension_list = extension_list
        self.overwrite = overwrite
        self.data_type = data_type
        self.normalisation = normalise
        self.save_stack = save_stack
        self.contrast_streching = contrast_streching
        self.saturated_pixels = saturated_pixels
        # to ask to overwrite the first time when the checkBox is unchecked
        if not overwrite:
            self.overwrite = None

    def set_fname(self, fname):
        self.fname = fname

    def read(self, fname=None):
        if fname is None:
            fname = self.fname
        else:
            self.fname = fname
        self.s = hs.signals.Signal2D(self._load_data(fname))

    def _load_data(self, fname):
        data = np.fromfile(fname, dtype=np.dtype(self.data_type))
        return data.reshape(self._parse_shape(fname)[::-1])

    def _parse_shape(self, fname):
        """
        Example of filename:
            <Prefix>_DiffPlaneTotal_Defocus<DF>_<NX>x<NY>.bin
        with <NX>x<NY> the shape we are interested in.
        """
        filename = os.path.splitext(fname)[0]
        (rest, ny) = filename.rsplit('x', maxsplit=1)
        nx = rest.split('_')[-1]
        return int(nx), int(ny)        

    def convert_bin(self):
        original_data = self.s.data.copy()
        for extension in self.extension_list:
            self.s.data = original_data
            if extension in ['jpg', 'jpeg'] and self.contrast_streching:
                vmin, vmax = contrast_stretching(self.s.data,
                                                 self.saturated_pixels)
                self.s.data = self.normalise(self.s.data, vmin, vmax)
            self.fname_ext = ''.join([os.path.splitext(self.fname)[0], '.',
                                      extension])
            if os.path.exists(self.fname_ext) and self.overwrite is None:
                write_answer = self._ask_confirmation_overwrite()
                self._save_data(self.s, overwrite=write_answer)
            # workaround, currently hyperspy doesn't write file is
            # overwrite=False
            elif not os.path.exists(self.fname_ext):
                self._save_data(self.s)
            else:
                self._save_data(self.s, overwrite=self.overwrite)

    def _questionBox(self, fname, path):
        msgBox = QtWidgets.QMessageBox()
        msgBox.setWindowTitle("Overwriting File?")
        question = "Do you want to overwrite the file\n'%s' \nin the folder '%s'?" % (
            fname, path)
        msgBox.setText(question)
        msgBox.addButton(QtWidgets.QMessageBox.Yes)
        msgBox.addButton(QtWidgets.QMessageBox.YesToAll)
        msgBox.addButton(QtWidgets.QMessageBox.No)
        msgBox.addButton(QtWidgets.QMessageBox.NoToAll)
        return msgBox.exec_()

    def _ask_confirmation_overwrite(self):
        # Add a button to ask "Yes to all", "No to all"
        path = os.path.split(self.fname_ext)[0]
        fname = os.path.split(self.fname_ext)[1]
        questionBox = self._questionBox(fname, path)
        if questionBox == QtWidgets.QMessageBox.Yes:
            self.overwrite = None
            return True
        elif questionBox == QtWidgets.QMessageBox.YesToAll:
            self.overwrite = True
            return True
        elif questionBox == QtWidgets.QMessageBox.NoToAll:
            self.overwrite = False
            return False
        else:
            self.overwrite = None
            return False

    def _save_data(self, item, overwrite=None, **kwargs):
        item.save(self.fname_ext, overwrite=overwrite, **kwargs)

    def normalise(self, arr, vmin=None, vmax=None):
        if vmin == None:
            vmin = arr.min()
        if vmax == None:
            vmax = arr.max()
        return (arr.astype(float) - vmin) / (vmax - vmin)

